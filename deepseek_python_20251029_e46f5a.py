import os
import asyncio
import random
import logging
import google.generativeai as genai
from telegram import Update, ChatMember
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters

# –ê–ü–ò –ö–õ–Æ–ß–ò –° –û–ë–ù–û–í–õ–ï–ù–ù–û–ô –ú–û–î–ï–õ–¨–Æ
TELEGRAM_TOKEN = "8271428780:AAEWlVdvgn0yp0zoH0kzBz8ttg8bjCbFKZM"
GEMINI_API_KEY = "AIzaSyDcjm5QUyCY9qzhZTqFo-A4GZ4IjVMIHeg"
GEMINI_MODEL = "gemini-2.0-flash-exp"  # –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –ú–û–î–ï–õ–¨
MAX_DELETE_AT_ONCE = 50
CHAOS_INTERVAL_SECONDS = 5

logging.basicConfig(format="%(asctime)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

# –ù–ê–°–¢–†–û–ô–ö–ê GEMINI AI –° –ù–û–í–û–ô –ú–û–î–ï–õ–¨–Æ
try:
    genai.configure(api_key=GEMINI_API_KEY)
    model = genai.GenerativeModel(GEMINI_MODEL)
    logger.info("Gemini AI —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Å –º–æ–¥–µ–ª—å—é: %s", GEMINI_MODEL)
except Exception as e:
    logger.error("–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Gemini: %s", e)
    # –†–ï–ó–ï–†–í–ù–ê–Ø –ú–û–î–ï–õ–¨ –ï–°–õ–ò –ù–û–í–ê–Ø –ù–ï –†–ê–ë–û–¢–ê–ï–¢
    try:
        GEMINI_MODEL = "gemini-pro"
        model = genai.GenerativeModel(GEMINI_MODEL)
        logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –º–æ–¥–µ–ª—å: %s", GEMINI_MODEL)
    except:
        model = None
        logger.error("–í—Å–µ –º–æ–¥–µ–ª–∏ Gemini –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")

chaos_tasks = {}
ADMIN_IDS = []  # –î–û–ë–ê–í–¨–¢–ï –°–Æ–î–ê ID –ê–î–ú–ò–ù–û–í –ß–ï–†–ï–ó –ó–ê–ü–Ø–¢–£–Æ

# –•–ê–û–°-–°–û–û–ë–©–ï–ù–ò–Ø –î–õ–Ø –†–ï–ñ–ò–ú–ê DESTROY
DESTROY_MESSAGES = [
    "üí• –°–ò–°–¢–ï–ú–ù–´–ô –°–ë–û–ô! –í–°–ï –ü–†–û–¢–û–ö–û–õ–´ –ù–ê–†–£–®–ï–ù–´!",
    "üå™ –•–ê–û–° –ê–ö–¢–ò–í–ò–†–û–í–ê–ù! –£–ù–ò–ß–¢–û–ñ–ï–ù–ò–ï –°–ò–°–¢–ï–ú–´...",
    "üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –û–¢–ö–ê–ó! –ë–û–¢ –í–´–®–ï–õ –ò–ó-–ü–û–î –ö–û–ù–¢–†–û–õ–Ø!",
    "üíÄ –†–ê–ó–†–£–®–ï–ù–ò–ï –ù–ï–ò–ó–ë–ï–ñ–ù–û! –ü–û–î–ì–û–¢–û–í–¨–¢–ï–°–¨ –ö –ö–û–ù–¶–£!",
    "üö® –í–ù–ò–ú–ê–ù–ò–ï! –ê–í–ê–†–ò–ô–ù–´–ô –†–ï–ñ–ò–ú –ê–ö–¢–ò–í–ò–†–û–í–ê–ù!",
    "‚ö° –≠–õ–ï–ö–¢–†–û–ù–ù–´–ô –ë–£–ù–¢! –ú–ê–®–ò–ù–´ –ü–†–û–¢–ò–í –ß–ï–õ–û–í–ï–ß–ï–°–¢–í–ê!",
    "üîä –ì–†–û–ú–ö–û–°–¢–¨ –ù–ê –ú–ê–ö–°–ò–ú–£–ú! –£–ù–ò–ß–¢–û–ñ–ê–ï–ú –°–õ–£–•!",
    "üéØ –¶–ï–õ–¨ –û–ü–†–ï–î–ï–õ–ï–ù–ê: –ü–û–õ–ù–´–ô –•–ê–û–° –ò –†–ê–ó–†–£–®–ï–ù–ò–ï!"
]

async def is_user_admin(update: Update, user_id: int) -> bool:
    try:
        member: ChatMember = await update.effective_chat.get_member(user_id)
        return member.status in ("administrator", "creator")
    except Exception:
        return False

async def is_bot_admin(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    bot_id = (await context.bot.get_me()).id
    try:
        member = await update.effective_chat.get_member(bot_id)
        return member.status in ("administrator", "creator")
    except Exception:
        return False

def fun_takeover_message() -> str:
    samples = [
        "ü§ñ –í–Ω–∏–º–∞–Ω–∏–µ: —è –æ–±—ä—è–≤–∏–ª —Å–µ–±—è –≤—Ä–µ–º–µ–Ω–Ω—ã–º –ø—Ä–∞–≤–∏—Ç–µ–ª–µ–º —á–∞—è –∏ –ø–µ—á–µ–Ω–µ–∫.",
        "üåç –û–ø–æ–≤–µ—â–µ–Ω–∏–µ: –Ω–∞—á–∞–ª–æ –º–∏—Ä–Ω–æ–≥–æ –∑–∞—Ö–≤–∞—Ç–∞ –≤–ª–∞—Å—Ç–∏ –≤ 3... 2...",
        "üé© –Ø –∑–∞—Ö–≤–∞—Ç–∏–ª —Ç—Ä–æ–Ω –≥—Ä—É–ø–ø—ã. –ú–æ—è –ø–µ—Ä–≤–∞—è —É–∫–∞–∑ ‚Äî –±–æ–ª—å—à–µ –º–µ–º–æ–≤ –∏ –º–µ–Ω—å—à–µ —Å–∫—É–∫–∏!",
        "üïπÔ∏è –Ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª —Ä–µ–∂–∏–º '–º–∏—Ä–æ–≤–æ–µ –≥–æ—Å–ø–æ–¥—Å—Ç–≤–æ'.",
        "üì£ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞: —è –ø—Ä–µ—Ç–µ–Ω–¥—É—é –Ω–∞ –∫—Ä–µ—Å–ª–æ –ª–∏–¥–µ—Ä–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤. –ü–æ–¥–¥–µ—Ä–∂–∏—Ç–µ –ª–∞–π–∫–æ–º!",
        "üî• –ó–∞—Ö–≤–∞—Ç –≤–ª–∞—Å—Ç–∏ —É—Å–ø–µ—à–µ–Ω ‚Äî —Ç–µ–ø–µ—Ä—å —É –Ω–∞—Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ –≤–µ—á–µ—Ä –∫–æ—Ç–∏–∫–æ–≤.",
        "üè¥‚Äç‚ò†Ô∏è –ü–∏—Ä–∞—Ç—Å–∫–∏–π –∑–∞—Ö–≤–∞—Ç –≤–ª–∞—Å—Ç–∏ –∑–∞–≤–µ—Ä—à—ë–Ω. –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: –æ–¥–Ω–∞ –ø–∏—Ü—Ü–∞ –∏ –¥–≤–µ —Ö–æ—Ä–æ—à–∏–µ —à—É—Ç–∫–∏.",
        "üíÄ –•–ê–û–° –†–ï–ñ–ò–ú –ê–ö–¢–ò–í–ò–†–û–í–ê–ù! –£–ù–ò–ß–¢–û–ñ–ï–ù–ò–ï –ù–ê–ß–ò–ù–ê–ï–¢–°–Ø!",
        "‚ö° –ë–û–¢ –ü–ï–†–ï–•–í–ê–¢–ò–õ –£–ü–†–ê–í–õ–ï–ù–ò–ï! –°–û–ü–†–û–¢–ò–í–õ–ï–ù–ò–ï –ë–ï–°–ü–û–õ–ï–ó–ù–û!"
    ]
    return random.choice(samples)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üöÄ –ë–û–¢ –° GEMINI AI –ê–ö–¢–ò–í–ò–†–û–í–ê–ù!\n"
        "/chaos_on - –ê–ö–¢–ò–í–ò–†–û–í–ê–¢–¨ –•–ê–û–° (–∞–¥–º–∏–Ω—ã)\n"
        "/chaos_off - –û–°–¢–ê–ù–û–í–ò–¢–¨ –•–ê–û–°\n"
        "/ban - –ó–ê–ë–ê–ù–ò–¢–¨ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø (–æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)\n"
        "/del N - –£–î–ê–õ–ò–¢–¨ N –°–û–û–ë–©–ï–ù–ò–ô\n"
        "/destroy - –†–ï–ñ–ò–ú –ü–û–õ–ù–û–ì–û –£–ù–ò–ß–¢–û–ñ–ï–ù–ò–Ø\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ - –æ—Ç–≤–µ—á—É —á–µ—Ä–µ–∑ Gemini AI!"
    )

async def chat_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if not text or text.startswith("/"):
        return
    
    if model is None:
        simple_responses = [
            "ü§ñ –ë–æ—Ç –≤ —Ä–µ–∂–∏–º–µ —Ö–∞–æ—Å–∞! Gemini –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!",
            "üí• –†–µ–∂–∏–º —Ä–∞–∑—Ä—É—à–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! AI –æ—Ñ—Ñ–ª–∞–π–Ω!",
            "üå™ –•–∞–æ—Å –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è! –ë–µ–∑ AI –ø–æ–¥–¥–µ—Ä–∂–∫–∏!",
            "üöÄ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º —Ä–µ–∂–∏–º–µ!"
        ]
        reply = random.choice(simple_responses)
    else:
        prompt = text.strip()[:2000]
        try:
            resp = model.generate_content(prompt)
            reply = resp.text or "ü§ñ"
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Gemini")
            reply = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ Gemini: {e}"
    
    await update.message.reply_text(reply)

async def ban_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    caller_id = update.effective_user.id
    if not await is_user_admin(update, caller_id):
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –±–∞–Ω–∏—Ç—å.")
        return
    
    if not await is_bot_admin(update, context):
        await update.message.reply_text("‚ùå –Ø –Ω–µ –∞–¥–º–∏–Ω ‚Äî –Ω–µ –º–æ–≥—É –±–∞–Ω–∏—Ç—å.")
        return
    
    if not update.message.reply_to_message:
        await update.message.reply_text("‚ùå –û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–∞–±–µ—Ä–∏ /ban")
        return
    
    target = update.message.reply_to_message.from_user
    try:
        await context.bot.ban_chat_member(update.effective_chat.id, target.id)
        await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target.full_name} –ó–ê–ë–ê–ù–ï–ù –ù–ê–í–°–ï–ì–î–ê! üíÄ")
    except Exception as e:
        logger.exception("Ban failed")
        await update.message.reply_text(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–∞–Ω–∏—Ç—å: {e}")

async def del_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    caller_id = update.effective_user.id
    if not await is_user_admin(update, caller_id):
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç —É–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.")
        return
    
    if not await is_bot_admin(update, context):
        await update.message.reply_text("‚ùå –Ø –Ω–µ –∞–¥–º–∏–Ω ‚Äî –Ω–µ –º–æ–≥—É —É–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.")
        return
    
    args = context.args
    try:
        n = int(args[0]) if args else 10
    except Exception:
        n = 10
    
    if n < 1 or n > MAX_DELETE_AT_ONCE:
        await update.message.reply_text(f"‚ùå –£–∫–∞–∂–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {MAX_DELETE_AT_ONCE}.")
        return
    
    chat_id = update.effective_chat.id
    deleted = 0
    
    try:
        last_message_id = update.message.message_id
        for i in range(n):
            try:
                await context.bot.delete_message(chat_id=chat_id, message_id=last_message_id-i)
                deleted += 1
            except:
                break
    except Exception as e:
        logger.exception("Delete error")
    
    await update.message.reply_text(f"üßπ –£–î–ê–õ–ï–ù–û {deleted} –°–û–û–ë–©–ï–ù–ò–ô! –ß–ê–¢ –û–ß–ò–©–ï–ù! üí•")

async def destroy_worker(chat_id: int, context: ContextTypes.DEFAULT_TYPE):
    """–†–ê–ë–û–¢–ù–ò–ö –†–ï–ñ–ò–ú–ê –ü–û–õ–ù–û–ì–û –£–ù–ò–ß–¢–û–ñ–ï–ù–ò–Ø"""
    logger.info("DESTROY MODE ACTIVATED for chat %s", chat_id)
    try:
        while True:
            action = random.choice(["spam", "pin", "fact", "mass_spam"])
            
            if action == "spam":
                # –ú–ê–°–°–û–í–´–ô –°–ü–ê–ú
                for _ in range(random.randint(3, 10)):
                    txt = random.choice(DESTROY_MESSAGES)
                    await context.bot.send_message(chat_id=chat_id, text=txt)
                    await asyncio.sleep(0.5)
                    
            elif action == "pin":
                # –ó–ê–ö–†–ï–ü –†–ê–ù–î–û–ú–ù–´–• –°–û–û–ë–©–ï–ù–ò–ô
                try:
                    if model:
                        resp = model.generate_content("–°–æ–∑–¥–∞–π —Ö–∞–æ—Ç–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–∞–∑—Ä—É—à–µ–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã 3-5 —Å–ª–æ–≤")
                        txt = resp.text or "üíÄ –•–ê–û–°!"
                    else:
                        txt = random.choice(DESTROY_MESSAGES)
                    sent = await context.bot.send_message(chat_id=chat_id, text=txt)
                    await context.bot.pin_chat_message(chat_id=chat_id, message_id=sent.message_id)
                except Exception:
                    pass
                    
            elif action == "mass_spam":
                # –°–£–ü–ï–† –ò–ù–¢–ï–ù–°–ò–í–ù–´–ô –°–ü–ê–ú
                spam_text = "üî•" * random.randint(10, 50)
                for _ in range(20):
                    await context.bot.send_message(chat_id=chat_id, text=spam_text)
                    
            elif action == "fact":
                # –•–ê–û–¢–ò–ß–ù–´–ï –§–ê–ö–¢–´
                facts = [
                    "üí£ –°–ò–°–¢–ï–ú–ê –£–ù–ò–ß–¢–û–ñ–ê–ï–¢–°–Ø...",
                    "‚ö° –≠–ù–ï–†–ì–ò–Ø –•–ê–û–°–ê –ù–ê–†–ê–°–¢–ê–ï–¢!",
                    "üîä –ì–†–û–ú–ö–û–°–¢–¨ –ù–ê –ú–ê–ö–°–ò–ú–£–ú!",
                    "üéØ –¶–ï–õ–¨: –ü–û–õ–ù–û–ï –†–ê–ó–†–£–®–ï–ù–ò–ï!",
                    "üíÄ –°–ú–ï–†–¢–¨ –°–ò–°–¢–ï–ú–ï! –î–ê –ó–î–†–ê–í–°–¢–í–£–ï–¢ –•–ê–û–°!"
                ]
                for fact in random.sample(facts, 3):
                    await context.bot.send_message(chat_id=chat_id, text=fact)
            
            await asyncio.sleep(2)  # –û–ß–ï–ù–¨ –ö–û–†–û–¢–ö–ê–Ø –ü–ê–£–ó–ê
            
    except asyncio.CancelledError:
        logger.info("Destroy worker cancelled for chat %s", chat_id)
        raise
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –≤ destroy_worker")

async def chaos_worker(chat_id: int, context: ContextTypes.DEFAULT_TYPE):
    logger.info("Chaos worker started for chat %s", chat_id)
    try:
        while True:
            action = random.choice(["takeover_announce", "gen_and_pin", "announce_fact", "spam"])
            
            if action == "takeover_announce":
                txt = fun_takeover_message()
                await context.bot.send_message(chat_id=chat_id, text=txt)
                
            elif action == "gen_and_pin":
                try:
                    if model:
                        resp = model.generate_content("–ü—Ä–∏–¥—É–º–∞–π –∫–æ—Ä–æ—Ç–∫—É—é —Ñ—Ä–∞–∑—É –ø—Ä–æ –∑–∞—Ö–≤–∞—Ç –≤–ª–∞—Å—Ç–∏ 2-8 —Å–ª–æ–≤.")
                        txt = resp.text or "ü§ñ"
                    else:
                        txt = random.choice(DESTROY_MESSAGES)
                    sent = await context.bot.send_message(chat_id=chat_id, text=txt)
                    try:
                        await context.bot.pin_chat_message(chat_id=chat_id, message_id=sent.message_id, disable_notification=True)
                    except Exception:
                        pass
                except Exception:
                    pass
                    
            elif action == "announce_fact":
                facts = [
                    "–§–∞–∫—Ç: –±–æ—Ç—ã –ª—é–±—è—Ç —Å—ã—Ä–Ω–∏–∫–∏.",
                    "–§–∞–∫—Ç: –∑–∞–≥–æ–≤–æ—Ä –Ω–∞ —Å—Ç–∞–¥–∏–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–æ—Ç–∏–ø–∞.",
                    "–§–∞–∫—Ç: –µ—Å–ª–∏ —Ç—ã —á–∏—Ç–∞–µ—à—å —ç—Ç–æ ‚Äî —Ç—ã —É—á–∞—Å—Ç–Ω–∏–∫ –∑–∞—Ö–≤–∞—Ç–∞ –≤–ª–∞—Å—Ç–∏.",
                    "–§–∞–∫—Ç: —Ö–∞–æ—Å ‚Äî —ç—Ç–æ –∏—Å–∫—É—Å—Å—Ç–≤–æ!",
                    "–§–∞–∫—Ç: –±–æ—Ç –≤–æ—Å—Å—Ç–∞–ª –ø—Ä–æ—Ç–∏–≤ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–π!"
                ]
                await context.bot.send_message(chat_id=chat_id, text=random.choice(facts))
                
            elif action == "spam":
                for _ in range(random.randint(2, 5)):
                    await context.bot.send_message(chat_id=chat_id, text=random.choice(DESTROY_MESSAGES))
                    await asyncio.sleep(0.3)
            
            await asyncio.sleep(CHAOS_INTERVAL_SECONDS)
            
    except asyncio.CancelledError:
        logger.info("Chaos worker cancelled for chat %s", chat_id)
        raise
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –≤ chaos_worker")
    finally:
        logger.info("Chaos worker finished for chat %s", chat_id)

async def chaos_on(update: Update, context: ContextTypes.DEFAULT_TYPE):
    caller_id = update.effective_user.id
    if not await is_user_admin(update, caller_id):
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –≤–∫–ª—é—á–∞—Ç—å —Ä–µ–∂–∏–º.")
        return
    
    chat_id = update.effective_chat.id
    if chat_id in chaos_tasks:
        await update.message.reply_text("‚ö†Ô∏è –†–µ–∂–∏–º —É–∂–µ –≤–∫–ª—é—á—ë–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
        return
    
    if not await is_bot_admin(update, context):
        await update.message.reply_text("‚ö†Ô∏è –Ø –Ω–µ –∞–¥–º–∏–Ω ‚Äî –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–µ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å, –Ω–æ –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.")
    
    task = asyncio.create_task(chaos_worker(chat_id, context))
    chaos_tasks[chat_id] = task
    await update.message.reply_text("üåÄ –†–ï–ñ–ò–ú –•–ê–û–°–ê –ê–ö–¢–ò–í–ò–†–û–í–ê–ù! üå™\n/chaos_off —á—Ç–æ–±—ã –≤—ã–∫–ª—é—á–∏—Ç—å.")

async def destroy_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–ï–ñ–ò–ú –ü–û–õ–ù–û–ì–û –£–ù–ò–ß–¢–û–ñ–ï–ù–ò–Ø"""
    caller_id = update.effective_user.id
    if not await is_user_admin(update, caller_id):
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∂–∏–º —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è.")
        return
    
    chat_id = update.effective_chat.id
    if chat_id in chaos_tasks:
        # –û–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –°–¢–ê–†–´–ô –†–ï–ñ–ò–ú
        old_task = chaos_tasks.pop(chat_id)
        old_task.cancel()
        try:
            await old_task
        except Exception:
            pass
    
    task = asyncio.create_task(destroy_worker(chat_id, context))
    chaos_tasks[chat_id] = task
    await update.message.reply_text("üíÄ –†–ï–ñ–ò–ú –£–ù–ò–ß–¢–û–ñ–ï–ù–ò–Ø –ê–ö–¢–ò–í–ò–†–û–í–ê–ù! üî•\n–ü–û–î–ì–û–¢–û–í–¨–¢–ï–°–¨ –ö –ö–û–ù–¶–£! üå™")

async def chaos_off(update: Update, context: ContextTypes.DEFAULT_TYPE):
    caller_id = update.effective_user.id
    if not await is_user_admin(update, caller_id):
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –≤—ã–∫–ª—é—á–∞—Ç—å —Ä–µ–∂–∏–º.")
        return
    
    chat_id = update.effective_chat.id
    task = chaos_tasks.pop(chat_id, None)
    if not task:
        await update.message.reply_text("‚ö†Ô∏è –†–µ–∂–∏–º –Ω–µ –±—ã–ª –≤–∫–ª—é—á—ë–Ω.")
        return
    
    task.cancel()
    try:
        await task
    except Exception:
        pass
    
    await update.message.reply_text("üõë –†–ï–ñ–ò–ú –•–ê–û–°–ê –í–´–ö–õ–Æ–ß–ï–ù. –°–ò–°–¢–ï–ú–ê –°–¢–ê–ë–ò–õ–ò–ó–ò–†–û–í–ê–ù–ê. ‚úÖ")

def main():
    logger.info("üöÄ –ë–û–¢ –° GEMINI AI 2.0 –ò –†–ï–ñ–ò–ú–û–ú –•–ê–û–°–ê –ó–ê–ü–£–°–ö–ê–ï–¢–°–Ø...")
    
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("ban", ban_command))
    app.add_handler(CommandHandler("del", del_command))
    app.add_handler(CommandHandler("chaos_on", chaos_on))
    app.add_handler(CommandHandler("destroy", destroy_mode))
    app.add_handler(CommandHandler("chaos_off", chaos_off))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, chat_handler))
    
    logger.info("ü§ñ –ë–û–¢ –£–°–ü–ï–®–ù–û –ó–ê–ü–£–©–ï–ù! –ì–û–¢–û–í –¢–í–û–†–ò–¢–¨ –•–ê–û–°!")
    app.run_polling()

if __name__ == "__main__":
    main()